### VIA PIETMA - https://pietma.com

[client]

socket = /run/mysqld/mysqld.sock

[mysqldump]

max_allowed_packet = 16M

# mysqldump can retrieve and dump table contents row by row, or it can
# retrieve the entire content from a table and buffer it in memory before
# dumping it. Buffering in memory can be a problem if you are dumping large
# tables. To dump tables row by row, use the --quick option (or --opt,
# which enables --quick). The --opt option (and hence --quick) is enabled
# by default, so to enable memory buffering, use --skip-quick
#
quick
 
[myisamchk]

key_buffer_size = 16M
sort_buffer_size = 1M
read_buffer = 2M
write_buffer = 2M

[mysqld]
 
# On Unix-like systems, this is the name of the socket file used for local
# client connections, by default /tmp/mysql.sock, often changed by the
# distribution, for example /var/lib/mysql/mysql.sock. On Windows, this is
# the name of the named pipe used for local client connections, by default
# MySQL. On Windows, this is not case-sensitive.
# 
# Scope: Global <br>
# Default Value: /tmp/mysql.sock (Unix), MySQL (Windows)
# 
socket = /run/mysqld/mysqld.sock

# If set to 1, (0 is the default), the server does not listen for TCP/IP
# connections. All interaction with the server by be through socket files
# (Unix) or named pipes or shared memory (Windows). It's recommended to use
# this option if only local clients are permitted to connect to the server.
# Enabling this option also prevents a server from functioning as a
# replication client.
# 
# Scope: Global <br>
# Default Value: 0
#
skip-networking

# Size of the buffer for the index blocks used by MyISAM tables and shared
# for all threads. See Optimizing key_buffer_size for more on selecting the
# best value.
# 
# Default Value: 134217728
# Scope: Global 
# https://mariadb.com/kb/en/mariadb/myisam-system-variables/#
# key_buffer_size
# 
key_buffer_size = 16M

# Each session performing a sort allocates a buffer with this amount of
# memory. Not specific to any storage engine. If the status variable
# sort_merge_passes is too high, you may need to look at improving your
# query indexes, or increasing this. Consider reducing where there are many
# small sorts, such as OLTP, and increasing where needed by session. 16k is
# a suggested minimum.
# 
# Scope: Global, Session Default Value: 2M (2097152) (some distributions
# increase the default)
# https://mariadb.com/kb/en/mariadb/server-system-variables/#
# sort_buffer_size
# 
sort_buffer_size = 1M

# Size in bytes of the buffer allocated when creating or sorting indexes on
# a MyISAM table.
# 
# Scope: Global, Session
# Default Value: 134217720 
# https://mariadb.com/kb/en/mariadb/myisam-system-variables/#
# myisam_sort_buffer_size
# 
myisam_sort_buffer_size = 8M

# Each thread performing a sequential scan (for MyISAM, Aria and MERGE
# tables) allocates a buffer of this size in bytes for each table scanned.
# Increase if you perform many sequential scans. If not in a multiple of
# 4KB, will be rounded down to the nearest multiple. Also used in ORDER
# BY's for caching indexes in a temporary file (not temporary table), for
# caching results of nested queries, for bulk inserts into partitions, and
# to determine the memory block size of MEMORY tables.
# 
# Scope: Global, Session
# Default Value: 131072
# https://mariadb.com/kb/en/mariadb/server-system-variables/#
# read_buffer_size
# 
read_buffer_size = 1M

# Size in bytes of the buffer used when reading rows from a MyISAM table in
# sorted order after a key sort. Larger values improve ORDER BY
# performance, although rather increase the size by SESSION where the need
# arises to avoid excessive memory use.
# 
# Scope: Global, Session
# Default Value: 262144
# https://mariadb.com/kb/en/mariadb/server-system-variables/#
# read_rnd_buffer_size
# 
read_rnd_buffer_size = 512K

# Number of days after which the binary log will be automatically removed.
# By default 0, or no automatic removal. When using replication, should
# always be set higher than the maximum lag by any slave.
# 
# Scope: Global 
# Default Value: 0
# https://mariadb.com/kb/en/mariadb/server-system-variables/#
# expire_logs_days
# 
expire_logs_days = 15

# Minimum size of the buffer used for queries that cannot use an index, and
# instead perform a full table scan. Increase to get faster full joins when
# adding indexes is not possible, although be aware of memory issues, since
# joins will always allocate the minimum size. Best left low globally and
# set high in sessions that require large full joins. In 64-bit platforms,
# Windows truncates values above 4GB to 4GB with a warning.
# 
# Scope: Global, Session
# Default Value: 256K (>=MariaDB 10.1.7), 131072 (128KB) (<=MariaDB 10.1.6)
# https://mariadb.com/kb/en/mariadb/server-system-variables/#
# join_buffer_size
# 
join_buffer_size = 128K

# Number of threads server caches for re-use. If this limit hasn't been
# reached, when a client disconnects, its threads are put into the cache,
# and re-used where possible. Normally this setting has little effect, as
# the other aspects of the thread implementation are more important, but
# increasing it can help servers with high volumes of connections per
# second so that most can use a cached, rather than a new, thread. The
# cache miss rate can be calculated as the server status variables
# threads_created/connections. If the thread pool is active,
# thread_cache_size is ignored.
# 
# Scope: Global
# Default Value: 0
# https://mariadb.com/kb/en/mariadb/server-system-variables
# /#thread_cache_size
# 
thread_cache_size = 15

# The size of the buffer used for index blocks for Aria tables. Increase
# this to get better index handling (for all reads and multiple writes) to
# as much as you can afford.
# 
# Scope: Global 
# Default Value: 134217720 (128MB)
# https://mariadb.com/kb/en/mariadb/aria-system-variables/#
# aria_pagecache_buffer_size
# 
aria_pagecache_buffer_size = 20M

# The number of segments in a key cache. See Segmented Key Cache.
# 
# Scope: Global 
# Default Value: 0 (non-segmented)
# https://mariadb.com/kb/en/mariadb/myisam-system-variables/
# 
key_cache_segments = 4

### VIA ZARAFA WIKI - http://www.zarafa.com/wiki/index.php/MySQL_tuning

# max_connections = [threads parameter in server.cfg] * 2 + 1
#
max_connections = 35

# XtraDB/InnoDB flushing method. Windows always uses async_unbuffered and
# this variable then has no effect. On Unix, by default fsync() is used to
# flush data and logs. Adjusting this variable can give performance
# improvements, but behavior differs widely on different filesystems, and
# changing from the default has caused problems in some situations, so test
# and benchmark carefully before adjusting.
# 
# O_DSYNC - O_DSYNC is used to open and flush logs, and fsync() to flush
# the data files. O_DIRECT - O_DIRECT or directio(), is used to open data
# files, and fsync() to flush data and logs. fdatasync - an old default
# value that follows the default behavior of using fsync(), but replaced
# with the unset default to avoid confusion between fdatasync() and
# fsync(). O_DIRECT_NO_FSYNC - introduced in MariaDB 10.0 / MySQL 5.6.7.
# Uses O_DIRECT during flushing I/O, but skips fsync() afterwards. Not
# suitable for XFS filesystems. ALL_O_DIRECT - introduced in MariaDB 10.0 /
# Percona 5.6, and available with XtraDB only. Uses O_DIRECT for opening
# both data and logs and fsync() to flush data but not logs. Use with large
# InnoDB files only, otherwise may cause a performance degradation. Set
# innodb_log_block_size to 4096 on ext4 filesystems. This is the default
# log block size on ext4 and will avoid unaligned AIO/DIO warnings.
# 
# Scope: Global
# Default Value: Not set.
# https://mariadb.com/kb/en/mariadb/xtradbinnodb-server
# -system-variables/#innodb_flush_method
# 
innodb_flush_method = O_DSYNC

# Individual InnoDB data files, paths and sizes. The value of
# innodb_data_home_dir is joined to each path specified by
# innodb_data_file_path to get the full directory path. If
# innodb_data_home_dir is an empty string, absolute paths can be specified
# here. A file size is specified with K for kilobytes, M for megabytes and
# G for gigabytes, and whether or not to autoextend the data file is also
# specified.
# 
# Scope: Global
# Default Value: ibdata1:12M:autoextend (from MariaDB 10.0),
# ibdata1:10M:autoextend (before MariaDB 10.0)
# https://mariadb.com/kb/en/mariadb
# /xtradbinnodb-server-system-variables/#innodb_data_file_path
#
# innodb_data_file_path = ibdata1:10M:autoextend:max:64M

### VIA ZARAFA DOCUMENTATION - https://doc.zarafa.com/7.1/Administrator_Manual/en-US/html-single/#_memory_usage_setup
 
# If set to 0, the query cache is disabled (although a buffer of
# query_cache_size bytes is still allocated). If set to 1 all SELECT
# queries will be cached unless SQL_NO_CACHE is specified. If set to 2 (or
# DEMAND), only queries with the SQL CACHE clause will be cached. Note that
# if the server is started with the query cache disabled, it cannot be
# enabled at runtime.
# 
# Scope: Global, Session 
# Default Value: OFF (>= MariaDB 10.1.7), ON (<= MariaDB 10.1.6)
# https://mariadb
# .com/kb/en/mariadb/server-system-variables/#query_cache_type
# 
query_cache_type = 1

# Size in bytes available to the query cache. About 40KB is needed for
# query cache structures, so setting a size lower than this will result in
# a warning. 0, the default before MariaDB 10.1.7, effectively disables the
# query cache.
# 
# Scope: Global
# Default Value: 1M (>= MariaDB 10.1.7), 0 (<= MariaDB 10.1.6) (although
# frequently given a default value in some setups)
# https://mariadb.com/kb/en
# /mariadb/server-system-variables/#query_cache_size
# 
query_cache_size = 32M

# Maximum size in bytes of a packet or a generated/intermediate string. The
# packet message buffer is initialized with the value from
# net_buffer_length, but can grow up to max_allowed_packet bytes. Set as
# large as the largest BLOB, in multiples of 1024. If this value is
# changed, it should be changed on the client side as well. See
# slave_max_allowed_packet for a specific limit for replication purposes.
# 
# Scope: Global 
# Default Value: 1048576 (1MB) <= MariaDB 10.1.6, 4M >= MariaDB 10.1.7,
# 1073741824 (1GB) (client-side)
# https://mariadb.com/kb/en/mariadb/server-system
# -variables/#max_allowed_packet
# 
max_allowed_packet = 16M

# Number of open tables for all threads. See Optimizing table_open_cache
# for suggestions on optimizing. Increasing table_open_cache increases the
# number of file descriptors required. Previously called table_cache prior
# to MySQL 5.1.3
# 
# Scope: Global 
# Default Value: 2000 (>= MariaDB 10.1.7), 400 (<= MariaDB 10.1.6)
# https://mariadb
# .com/kb/en/mariadb/server-system-variables/#table_open_cache
# 
table_open_cache = 1000

# Stack size for each thread. If set too small, limits recursion depth of
# stored procedures and complexity of SQL statements the server can handle
# in memory. Also affects limits in the crash-me test.
# 
# Scope: Global
# Default Value: 294912
# https://mariadb.com/kb/en/mariadb/server-system-variables/#thread_stack
# 
# SQL Procedures allow for some optimized queries when streaming with
# enhanced ICS. This is default disabled because you must set 'thread_stack
# = 256k' in your MySQL server config under the [mysqld] tag and restart
# your MySQL server. (server.cfg)
# 
thread_stack = 256k 

# If set to 1, new XtraDB/InnoDB tables are created with data and indexes
# stored in their own .ibd file. If set to 0, the default, new tables are
# created in the system tablespace. Compression is only available with per
# table storage. Note that this value is also used when a table is
# re-created with an ALTER TABLE which requires a table copy.
# 
# Scope: Global
# Default Value: ON (>= MariaDB 5.5), OFF (<= MariaDB 5.3)
# https://mariadb.com/kb/en/mariadb/xtradbinnodb-server-system-variables/#
# innodb_file_per_table
# 
# innodb_file_per_table

# Size in bytes of each log file in the log group. The combined size can be
# no more than 4GB. Larger values mean less disk I/O due to less flushing
# checkpoint activity, but also slower recovery from a crash.
# 
# Scope: Global
# Default Value: 50331648 (48MB) (from MariaDB 10.0), 5242880
# (5MB) (before MariaDB 10.0)
# https://mariadb.com/kb/en/mariadb/xtradbinnodb-server-system
# -variables/#innodb_log_file_size
# 
# 25% of the innodb_buffer_pool_size
# 
innodb_log_file_size = 12M

# Size in bytes of the buffer for writing XtraDB/InnoDB log files to disk.
# Increasing this means larger transactions can run without needing to
# perform disk I/O before committing.
# 
# Scope: Global 
# Default Value: 8388608 (8MB)
# https://mariadb.com/kb/en/mariadb/xtradbinnodb
# -server-system-variables/#innodb_log_buffer_size
# 
innodb_log_buffer_size = 32M

# InnoDB buffer pool size in bytes. The primary value to adjust on a
# database server with entirely/primarily XtraDB/InnoDB tables, can be set
# up to 80% of the total memory in these environments. If set to 2 GB or
# more, you will probably want to adjust innodb_buffer_pool_instances as
# well. See the XtraDB/InnoDB Buffer Pool for more on setting this
# variable.
# 
# Scope: Global
# Default Value: 134217728 (128MB) 
# https://mariadb.com/kb/en/mariadb/xtradbinnodb-server-system-variables/#
# innodb_buffer_pool_size
# 
# around 50% of total RAM size / 25% when zarafa and MySQL on same Maschine
# 
innodb_buffer_pool_size = 124M


# This is the default isolation level for InnoDB. For consistent reads, there
# is an important difference from the READ COMMITTED isolation level: All
# consistent reads within the same transaction read the snapshot established
# by the first read. 
#
# Scope: Global
# Default Value: REPEATABLE READ
# https://mariadb.com/kb/en/mariadb/set-transaction/
# 
transaction-isolation = REPEATABLE-READ